<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>单例模式的四类写法</title>
      <link href="/2018/08/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%9B%9B%E7%B1%BB%E5%86%99%E6%B3%95/"/>
      <url>/2018/08/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%9B%9B%E7%B1%BB%E5%86%99%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul><li><p>饱汉模式（也称懒汉）</p><ol><li><p>饱汉-基础（非线程安全）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance = null;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饱汉模式的核心是懒加载。优点是启动速度快、节省资源，一直到实例被第一次访问才初始化单例；缺点是线程不安全，if语句存在竞态条件。在单线程环境下可采用此种写法。</p></li><li><p>饱汉-变种1（线程安全）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance = null;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized static Singleton getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法虽然绝对线程安全，但是并发性能极差，单例只需要初始化一次，但初始化后，synchronized的锁无法避免，从而getInstance()方法完全变成了串行操作。在性能不敏感的场景下可采用这种写法。</p></li><li><p>饱汉-变种2（非线程安全）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance = null;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">        synchronized (Singleton.class) &#123;</span><br><span class="line">                if (instance == null) &#123;</span><br><span class="line">                    instance = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法的核心是双重检查锁（Double Check Lock，简称DCL），代码看起来似乎是线程安全，实则不然，由于指令重排序，可能得到“半个对象”，关于指令重排序，读者可自行学习。</p></li><li><p>饱汉-变种3（线程安全）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static volatile Singleton instance = null;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">        synchronized (Singleton.class) &#123;</span><br><span class="line">                if (instance == null) &#123;</span><br><span class="line">                    instance = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法专门针对变种2，在instance上增加了volatile关键字，使用于性能敏感的场景。</p></li></ol></li><li><p>饿汉模式（线程安全）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static final Singleton instance = new Singleton();</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉模式的好处是天生的线程安全（类加载时初始化单例），使用时没有延迟；坏处是可能造成资源浪费（也即是在类加载后一直不使用单例）。</p></li><li><p>Holder模式（线程安全）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static class SingletonHolder &#123;</span><br><span class="line">        private static final Singleton instance = new Singleton();</span><br><span class="line">        private SingletonHolder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        return SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Holder模式满足了两点要求：核心仍是静态变量，满足线程安全；通过静态内部类持有真正实例，间接实现了懒加载，略优于饱汉模式的变种3。</p></li><li><p>枚举模式（线程安全）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法虽然牺牲了静态工厂方法的优点（无法实现懒加载），但它可以避免多线程同步问题，还能防止反序列化重新创建新的对象。</p></li></ul><p>以上分析忽略了反射和序列化可以创建新的实例从而破坏单例模式的问题，只有枚举模式能防范这一问题。下面对以上分析做个总结：</p><table><thead><tr><th style="text-align:center">实现方式</th><th style="text-align:center">核心点</th><th style="text-align:center">资源浪费</th><th style="text-align:center">线程安全</th><th style="text-align:center">多线程环境下的性能优化</th></tr></thead><tbody><tr><td style="text-align:center">饱汉-基础</td><td style="text-align:center">懒加载</td><td style="text-align:center">否</td><td style="text-align:center">否</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">饱汉-变种1</td><td style="text-align:center">懒加载、同步</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">饱汉-变种2</td><td style="text-align:center">懒加载、DCL</td><td style="text-align:center">否</td><td style="text-align:center">否</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">饱汉-变种3</td><td style="text-align:center">懒加载、DCL、volatile</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">饿汉模式</td><td style="text-align:center">静态变量初始化</td><td style="text-align:center">是</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">Holder模式</td><td style="text-align:center">静态变量初始化、Holder</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">枚举模式</td><td style="text-align:center">枚举本质、静态变量初始化</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 单例 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java代码优化（下）</title>
      <link href="/2018/08/27/Java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2018/08/27/Java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<ol start="24"><li><p>使用数据库连接池和线程池</p><p>这两个池都是用于重用对象的，前者可以避免频繁地打开和关闭连接，后者可以避免频繁地创建和销毁线程。</p></li><li><p>使用带缓冲的输入输出流进行IO操作</p><p>带缓冲的输入输出流，即BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升IO效率。</p></li><li><p>顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList</p><p>这个需要理解ArrayList和LinkedList的原理。</p></li><li><p>避免让public方法中有太多的形参</p><p>public方法即对外提供的方法，如果这些方法有太多形参主要有两点坏处：</p><ul><li>违反面向对象的编程思想，Java讲究一切都是对象，太多形参和面向对象的编程思想不契合</li><li>参数太多势必导致方法调用的出错率增加</li></ul><p>参数最好控制在两个以内，比如我们用jdbc写一个insertStudent方法，有10个学生信息字段需要插入Student表中，可以把这10个参数封装在一个实体类中，作为insertStudent方法的形参。</p></li><li><p>字符串变量和字符串常量equals的时候将字符串常量写在前面</p><p>这个技巧比较常见，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;123&quot;;</span><br><span class="line">if (str.equals(&quot;123&quot;)) &#123;</span><br><span class="line">code...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;123&quot;;</span><br><span class="line">if (&quot;123&quot;.equals(str)) &#123;</span><br><span class="line">code...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么做主要可以避免空指针异常。</p></li><li><p>在java中if (i == 1)和if (1 == i)是没有区别的，但从阅读习惯上讲，建议使用前者</p></li><li><p>不要对数组使用toString()方法</p><p>看一下对数组使用toString()打印出来的是什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr = new int[] &#123;1, 2, 3&#125;;</span><br><span class="line">    System.out.println(arr.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[I@18a992f</span><br></pre></td></tr></table></figure><p>本意是想打印出数组内容，但却可能因为数组引用arr为空而导致空指针异常。不过虽然对数组使用toString()方法没有意义，但是对集合使用该方法可以打印出集合里面的内容的，因为集合的父类AbstractCollections<e>重写了Object的toString()方法。</e></p></li><li><p>不要对超出范围的基本数据类型做向下强制转型</p><p>例如一下代码不会得到想要的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    long l = 12345678901234L;</span><br><span class="line">    int i = (int) l;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可能期望得到其中的某几位，但结果却是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1942892530</span><br></pre></td></tr></table></figure><p>解释一下，在Java中long型数据是8个字节64位，所以12345678901234在计算机中的表示应该是：</p><p>0000 0000 0000 0000 0000 1011 0011 1010 0111 0011 1100 1110 0010 1111 1111 0010</p><p>一个int型数据时4个字节32位，从低位取出上面这串二进制数据的前32位是：</p><p>0111 0011 1100 1110 0010 1111 1111 0010</p><p>这串二进制表示为十进制1942892530，也就是我们上面控制台的输出内容。</p><p>注：整型默认的数据类型为int，浮点型默认的数据类型为double。</p></li><li><p>公用的集合类中不使用的数据要及时remove掉</p></li><li><p>把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式，String.valueOf(数据)次之，数据+””最慢</p><ul><li>String.valueOf()方法底层调用了Integer.toString()方法，但在调用前会做空判断</li><li>Integer.toString()方法直接调用</li><li>数据 + “”的底层使用了StringBuilder实现，先用append()方法进行拼接，再用toString()方法获取字符串</li></ul></li><li><p>使用最有效率的方式去遍历Map</p><p>遍历Map的方式有很多，通常情景下我们需要的是遍历Map中的Key和value，以下推荐使用的效率最高的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(&quot;111&quot;, &quot;222&quot;);</span><br><span class="line">    Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = entrySet.iterator();</span><br><span class="line">    while (iterator.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class="line">        Sysout.out.println(entry.getKey() + &quot;\t&quot; + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只是遍历这个Map的key值，则用”Set<string> keySet = map.keySet();”会比较合适。</string></p></li><li><p>对资源的close()建议分开操作</p><p>比如有如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    code...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    code...</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    code...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然麻烦点，却能避免资源泄露，试想，如果用没有修改过的代码，万一XXX.close()抛异常了，那么就进入catch块中了，YYY.close()则不会执行，YYY这块资源就不会回收了，一直占用着，这样的代码一多，可能引起资源句柄泄漏。而改为修改过的代码，就保证了无论如何XXX和YYY都会被close掉。</p></li><li><p>切忌以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定</p></li><li><p>long或者Long初始赋值时，使用大写的L而不是小写的l，因为字母l极易与数字1混淆，这个细节需要注意</p></li><li><p>所有重写的方法必须保留@Override注解</p><p>这么做有三点原因：</p><ul><li>清楚地知道这个方法由父类继承而来</li><li>getObject()和get0bject()方法，前者第四个字母是”O”，后者第四个字母是”0”，加了@Override注解可以马上判断是否重写成功</li><li>在抽象类中对方法签名进行修改，实现类会马上报出编译错误</li></ul></li><li><p>推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a.equals(b)有空指针异常的风险</p></li><li><p>循环体内不要使用“+”进行字符串的拼接，而直接使用StringBuilder不断append</p><p>每次虚拟机碰到“+”这个操作符对字符串进行拼接的时候，会new出一个StringBuilder，然后调用append方法，最后调用toString方法转换为字符串，也就是循环多少次，就会new出多少个StringBuilder来，这对于内存来讲是一种浪费。</p></li><li><p>不捕获Java类库中定义的继承自RuntimeException的运行时异常类</p><p>异常处理效率较低，RuntimeException的运行时异常，其中绝大多数完全可由程序员来规避，比如：</p><ul><li>ArithmeticException            可通过判断除数是否为空来规避</li><li>NullPointerException           可通过判断对象是否为空来规避</li><li>IndexOutOfBoundsException    可通过判断数组/字符串长度来规避</li><li>ClassCastException               可通过instanceof关键字来规避</li><li>ConcurrentModificationException         可使用迭代器来规避</li></ul></li><li><p>避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed导致性能下降，JDK7之后可以使用ThreadLocalRandom来获取随机数</p></li><li><p>静态类、单例类、工厂类将它们的构造函数置为private</p><p>这是因为静态类、单例类、工厂类这种类本来就不需要我们从外部将它们new出来，将构造函数置为private之后，保证了这些类不会产生实例。</p></li><li><p>对于TreadLocal使用前或者使用后一定要先remove</p><p>线程池技术做的是一个线程重用，意味着，在代码运行过程中，一条线程使用完毕，并不会销毁而是等待下一次的使用，在Thread类中，持有ThreadLocal.ThreadLocalMap的引用，线程不销毁意味着上条线程set的ThreadLocal.ThreadLocalMap中的数据依然存在，那么在下一条线程重用这个Thread的时候，很可能get到的是上条线程set的数据而不是自己想要的内容。</p></li></ol>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 代码优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java代码优化（上）</title>
      <link href="/2018/08/23/Java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2018/08/23/Java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>代码优化的定义：在不改变程序运行效果的前提下，对被编译的程序进行等价变换，使之能生成更加高效的目标代码。等价的含义是使得变换后的代码运行结果与变换前代码运行结果相同。优化的含义是最终生成的目标代码短（运行时间更短、占用空间更小），时空效率优化。</p><p>代码优化的作用：避免未知的错误。在写代码的时候，从源头开始注意各种细节，权衡并使用最优的选择，将会在很大程度上避免出现未知的错误，从长远来看也能极大地降低工作量。</p><p>代码优化的目标：为了减小代码的体积，并提高代码的运行效率。</p><ol><li><p>尽量指定类、方法的final修饰符</p><p>为类指定final修饰符，则该类不可被继承；为方法指定final修饰符，则该方法不可被重写。如果指定了一个类为final，则该类所有的方法都是final的，Java编译器会寻找机会内联所有的final方法，而内联对于提升Java运行效率的作用极大，此举能使性能平均提升50%。</p></li><li><p>尽量重用对象</p><p>尤其是对String对象的使用，出现字符串连接时应该使用StringBuilder/StringBuffer代替，由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。</p></li><li><p>尽可能使用局部变量</p><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中，速度较快，其他变量，如静态变量、实例变量，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。</p></li><li><p>及时关闭流</p><p>Java编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果。</p></li><li><p>尽量减少对变量的重复计算</p><p>明确一个概念，对方法的调用，即使方法中只有一句语句，也是消耗的，包括创建栈帧、调用方法时保护现场、调用方法完毕时恢复现场等。例如下面的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; list.size(); i ++) &#123;</span><br><span class="line">    code...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议替换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0, length = list.size(); i &lt; length; i ++) &#123;</span><br><span class="line">code...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在list.size()很大时，就减少了很多的消耗。</p></li><li><p>尽量采用懒加载的策略，即在需要的时候才创建</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;aaa&quot;;</span><br><span class="line">if (i == 1) &#123;</span><br><span class="line">    list.add(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议替换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (i == 1) &#123;</span><br><span class="line">    String str = &quot;aaa&quot;;</span><br><span class="line">    list.add(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>慎用异常</p><p>异常对性能不利，抛出异常时首先需要创建一个新的对象，Throwable接口的构造函数调用名为fillnStackTrace()的本地同步方法，fillnStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，Java虚拟机就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。</p></li><li><p>不要在循环中使用try…catch…，应该把其放在最外层（有待商榷）</p></li><li><p>如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度</p><p>比如ArrayList、LinkedList、StringBuilder、StringBuffer、HashMap、HashSet等等，以StringBuilder为例：StringBuilder() （默认分配16个字符的空间）、StringBuilder(int size) （默认分配size个字符的空间）、StringBuilder(String str) （默认分配16个字符+str.length()个字符空间）</p><p>通过类的构造函数来设定它的初始化容量，可以明显提升性能。拿StringBuilder来说，length表示当前的StringBuilder能保持的字符数量。因为当StringBuilder达到最大容量的时候，它会将自身容量增加到当前的两倍再加2，即无论何时只要StringBuilder达到它的最大容量时，它不得不创建一个新的字符数组然后将旧的字符数组内容拷贝到新字符数组中，这样的操作十分耗费性能。既浪费了内存空间还降低了代码运行效率。</p><p>因此，给底层以数组实现的集合、工具类设置一个合理的初始化容量是错不了的。但是，像HashMap这种以数组+链表实现的集合，别把初始大小和你估计的大小设置得一样，因为一个table上只连接一个对象的可能性几乎为0，初始大小建议设置为2的N次幂。</p></li><li><p>当复制大量数据时，使用System.arraycopy()命令</p></li><li><p>乘法和除法使用移位操作</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (val = 0; val &lt; 100000; val += 5) &#123;</span><br><span class="line">    a = val * 8;</span><br><span class="line">    b = val / 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用移位操作可以极大地提高性能，因为在计算机底层，对位的操作是最方便的、最快的，因此建议修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (val = 0; val &lt; 100000; val += 5) &#123;</span><br><span class="line">    a = val &lt;&lt; 3;</span><br><span class="line">    b = val &gt;&gt; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移位操作虽然效率高，可能会使代码不太好理解，因此最好加上相应的注释。</p></li><li><p>循环内不要不断创建对象引用</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt;= count; i ++) &#123;</span><br><span class="line">    Object obj = new Object();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法会导致内存中有count份Object对象引用存在，count很大的话，就耗费内存，建议改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object obj = null;</span><br><span class="line">for (int i = 0; i &lt;= count; i ++) &#123;</span><br><span class="line">    obj = new Object();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，内存中只有一份Object对象引用，每次new Objct()的时候，Objct对象引用会指向不同的Object，但是内存中只有一份，这样可以大大节省内存空间。</p></li><li><p>基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList</p></li><li><p>尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后者由于使用了同步机制而增加了性能开销。</p></li><li><p>不要将数组声明为public static final</p><p>这样只是定义了引用为static final，数组的内容还是可以随意改变的，将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类改变。</p></li><li><p>尽量在合适的场合使用单例</p><p>使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要使用于以下三个方面：</p><ul><li>控制资源的使用，通过线程同步来控制资源的并发访问</li><li>控制实例的产生，以达到节约资源的目的</li><li>控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信</li></ul></li><li><p>尽量避免使用静态变量</p><p>当某个对象被定义为static的变量所引用，那么gc通常是不会回收这个对象所占有的堆内存的，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    private static B b = new B();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时静态变量b的生命周期与A类相同，如果A类不被卸载，那么引用B指向的B对象会常驻内存，直到程序终止。</p></li><li><p>及时清除不再需要的会话</p><p>为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多的会话时，如果内存不足，那么操作系统会把部分数据转移到磁盘，应用服务器也可能根据MRU算法把部分不活跃的会话转储到磁盘，甚至可能抛出内存不足的异常。如果会话要被转储到磁盘，那么必须先被序列化，在大规模集群中，对对象进行序列化的代价非常昂贵。因此，当会话不再需要时，应及时调用HttpSession的invalidate()方法清除会话。</p></li><li><p>实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环，而不是foreach循环来遍历</p><p>JDK API对于RandomAccess接口的解释为：实现RandomAccess接口用来表明其支持快速随机访问，此接口的主要目的是允许一般的算法更改其行为，从而将其应用到随机或连续访问列表时能提供良好的性能。实际经验表明，实现RandomAccess接口的类实例，假如是随机访问的，使用普通的for循环效率将高于使用foreach循环；反过来，如果是顺序访问的，则使用iterator效率会更高。可使用类似如下代码判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (list instanceof RandomAccess) &#123;</span><br><span class="line">    for (int i = 0; i &lt; list.size(); i ++) &#123;&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    Iterator&lt;?&gt; iterator = list.iterable();</span><br><span class="line">    while (iterator.hasNext()) &#123;</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foreach循环的底层实现原理就是迭代器Iterator，因此，如果是顺序访问那些类实例，则可使用foreach循环去遍历。</p></li><li><p>使用同步代码块替代同步方法</p><p>除非能确定一整个方法都是需要进行同步的，否则尽量使用同步代码块，避免对那些不需要进行同步的代码也进行了同步，从而影响了代码执行效率。</p></li><li><p>将常量声明为static final，并以大写命名</p><p>这样在编译器就可以把这些内容放入常量池中，避免运行期间计算生成常量的值，另外，将常量的名字以大写命名也能方便的区分出常量与变量。</p></li><li><p>不要创建一些不使用的对象，不要导入一些不使用的类</p></li><li><p>程序运行过程中避免使用反射</p><p>反射是Java提供给用户的一个强大功能，功能强大往往意味着效率不高，不建议在程序运行过程中频繁使用反射机制，尤其是Method的invoke方法，如果确实有必要，一种建议性的做法是将那些需要通过反射加载的类在项目启动时通过反射实例化一个对象并放入内存，用户只关心和对端交互的时候获取最快的响应速度，并不关心对端的项目启动需要花多长时间。</p></li></ol>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 代码优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java的位运算总结</title>
      <link href="/2018/08/23/Java%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/23/Java%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>Java提供的位运算符有：左移（&lt;&lt;）、右移（&gt;&gt;）、无符号右移（&gt;&gt;&gt;）、位与（&amp;）、位或（|）、位非（~）、位异或（^），除了位非（~）是一元操作符外，其他的都是二元操作符。</p><ol><li><p>左移（&lt;&lt;）</p><p>例如：将5左移2位</p><p>程序会先将5转换为2进制表示形式（java中整数的默认类型为int，即32位）</p><p>5的二进制原码为：    0000 0000 0000 0000 0000 0000 0000 0101        左移2位后，低位补0</p><p>5左移2位的结果为：    0000 0000 0000 0000 0000 0000 0001 0100        换算成10进制为20</p><p>左移：对于正数或者负数左移，低位都是用0补</p></li><li><p>右移（&gt;&gt;）</p><p>例如：将5右移2位</p><p>程序会先将5转换为2进制表示形式</p><p>5的二进制原码为：    0000 0000 0000 0000 0000 0000 0000 0101        右移2位后，高位补0</p><p>5右移2位的结果为：    0000 0000 0000 0000 0000 0000 0000 0001        换算成10进制为1</p><p>右移：对于正数右移，高位用0补，对于负数右移，高位用1补</p></li><li><p>无符号右移（&gt;&gt;&gt;）</p><p>例如：将-5无符号右移3位</p><p>5的二进制原码为：    0000 0000 0000 0000 0000 0000 0000 0101</p><p>5的二进制反码为：    1111 1111 1111 1111 1111 1111 1111 1010</p><p>5的二进制补码为：    1111 1111 1111 1111 1111 1111 1111 1011        即为-5的二进制码</p><p>那么-5无符号右移3位的结果为536870911换算成二进制：0001 1111 1111 1111 1111 1111 1111 1111</p><p>在计算机中，负数以其正值的补码形式表示，对于负数，求其补码的方法为：在原码基础上，先置最高的符号位为1，剩下的位按位取反，末尾加1</p><p>无符号右移：对于负数无符号右移，高位用0补，自然负数变成正数</p></li><li><p>位与（&amp;）</p><p>例如：将5和3作与运算</p><p>5的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0101</p><p>3的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0011</p><p>5 &amp; 3的结果为1换算成二进制：  0000 0000 0000 0000 0000 0000 0000 0001</p><p>位与操作：第一个操作数的第n位与第二个操作数的第n位如果都是1，那么结果的第n位也为1，否则为0</p></li><li><p>位或（|）</p><p>例如：将5和3作或运算</p><p>5的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0101</p><p>3的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0011</p><p>5 | 3的结果为7换算成二进制：   0000 0000 0000 0000 0000 0000 0000 0111</p><p>位或操作：第一个操作数的第n位与第二个操作数的第n位只要有一个为1，那么结果的第n位为1，否则为0</p></li><li><p>位异或（^）</p><p>例如：将5和3作异或运算</p><p>5的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0101</p><p>3的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0011</p><p>5 ^ 3的结果为6换算成二进制：   0000 0000 0000 0000 0000 0000 0000 0110</p><p>位异或操作：第一个操作数的第n位与第二个操作数的第n位如果相反，那么结果的第n位为1，否则为0</p></li><li><p>位非（~）</p><p>例如：将5作非运算</p><p>5的二进制码为：0000 0000 0000 0000 0000 0000 0000 0101</p><p>~ 5的结果为-6换算成二进制：    1111 1111 1111 1111 1111 1111 1111 1010</p><p>位非操作：位非是一元操作符，操作数的第n位为1，那么结果的第n位为0，反之为1</p></li></ol><p>由位运算操作符衍生而来的有：&amp;=（按位与赋值）、|=（按位或赋值 ）、^=（按位非赋值 ）、&gt;&gt;=（右移赋值 ）、&gt;&gt;&gt;=（无符号右移赋值 ）、&lt;&lt;=（赋值左移 ）</p>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>美到极致的情话</title>
      <link href="/2018/08/22/%E7%BE%8E%E5%88%B0%E6%9E%81%E8%87%B4%E7%9A%84%E6%83%85%E8%AF%9D/"/>
      <url>/2018/08/22/%E7%BE%8E%E5%88%B0%E6%9E%81%E8%87%B4%E7%9A%84%E6%83%85%E8%AF%9D/</url>
      <content type="html"><![CDATA[<ol><li>惊觉相思不露，原来只因已入骨，情不知所起，一往而深。恨不知所踪，一笑而泯。人世间有百媚千红，唯独你是我情之所钟。</li><li>浮世三千，吾爱有三，日、月与卿，日为朝，月为幕，卿为朝朝暮暮。</li><li>唯独你双手握得碎我，但我享受这折磨。</li><li>海底月是天上月，眼前人是心上人。</li><li>在青山绿水之间，我想牵着你的手，走过这座桥，桥上是绿叶红花，桥下是流水人家，桥的那头是青丝，桥的这头是白发。</li><li>人生最遗憾的莫过于轻易的放弃了不该放弃的，固执的坚持了不该坚持的。</li><li>夜阑卧听风吹雨，铁马是你，冰河也是你。</li><li>这一世，所到之地，都不过是故地重游；这世间，所有相遇，都不过是久别重逢。</li><li>我拦不住要走的风，也抱不住要走的你。</li><li>你，一会看我，一会看云；我觉得，你看我时，很远，你看云时很近。</li><li>我自从混迹到尘世间，便忘却了我自己；在你的灵魂我才知是谁。</li><li>原是今生今世已惘然，山河岁月空惆怅，而我，终将是要等着你的。</li><li>只愿多年后，我白发苍苍，容颜迟暮，你仍牵我双手，倾世温柔。</li><li>一生至少该有一次，为了某个人而忘了自己，不求有结果，不求同行，不求曾经拥有，甚至不求你，爱我，只求在我最美的年华里，遇到你。</li><li>于千万人之中遇见你所遇见的人，于千万年之中时间的无涯的荒野里，没有早一步，也没有晚一步，正巧赶上了。</li><li>岁月极美，在于它必然的消逝。春花、秋月、夏日、冬雪。</li><li>有情不必终老，暗香浮动恰好。</li><li>我总是躲在梦与季节的深处，听花与黑暗唱尽梦魇，唱尽繁华，唱断所有记忆的来路。</li><li>我情愿化成一片落叶，让风吹雨打到处飘零；或流云一朵，在澄蓝天，和大地再没有些牵连。</li><li>你是一树一树的花开，是燕在梁间呢喃。你是爱，是暖，是希望，你是人间的四月天。</li></ol>]]></content>
      
      <categories>
          
          <category> 唯美诗句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java后端书架</title>
      <link href="/2018/08/21/Java%E5%90%8E%E7%AB%AF%E4%B9%A6%E6%9E%B6/"/>
      <url>/2018/08/21/Java%E5%90%8E%E7%AB%AF%E4%B9%A6%E6%9E%B6/</url>
      <content type="html"><![CDATA[<ol><li><p>操作系统与网络的书</p><p><a href="https://book.douban.com/subject/6097773/" target="_blank" rel="noopener">《Linux内核设计与实现 第三版》</a></p><p><a href="https://book.douban.com/subject/25828773/" target="_blank" rel="noopener">《Linux系统编程 第二版》</a></p><p><a href="https://book.douban.com/subject/1088054/" target="_blank" rel="noopener">《TCP/IP详解 卷1：协议》</a></p><p><a href="https://book.douban.com/subject/26268767/" target="_blank" rel="noopener">《WireShark网络分析就这么简单》</a></p><p><a href="https://book.douban.com/subject/26710788/" target="_blank" rel="noopener">《WireShark网络分析的艺术》</a></p></li><li><p>算法的书</p><p><a href="https://book.douban.com/subject/26745780/" target="_blank" rel="noopener">《数据结构与算法分析-Java语言描述 第三版》</a></p><p><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="noopener">《算法 第四版》</a></p></li><li><p>语言的书</p><p><a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener">《Java并发编程实战》</a></p><p><a href="https://book.douban.com/subject/26663605/" target="_blank" rel="noopener">《实战Java高并发程序设计》</a></p><p><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机 第二版》</a></p><p><a href="https://book.douban.com/subject/26740520/" target="_blank" rel="noopener">《Java性能权威指南》</a></p><p><a href="https://book.douban.com/subject/25762168/" target="_blank" rel="noopener">《Java核心技术-Core Java》</a></p></li><li><p>具体技能的书</p><p><a href="https://book.douban.com/subject/26593175/" target="_blank" rel="noopener">《Docker：容器与容器云》</a></p><p><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="noopener">《Redis设计与实现分析》</a></p><p><a href="https://book.douban.com/subject/26702824/" target="_blank" rel="noopener">《分布式服务框架：原理与实践》</a></p><p><a href="https://book.douban.com/subject/26649141/" target="_blank" rel="noopener">《Spark技术内幕》</a></p><p><a href="https://book.douban.com/subject/26373138/" target="_blank" rel="noopener">《Netty权威指南 第二版》</a></p></li><li><p>程序员的自我修养</p><p><a href="https://book.douban.com/subject/1152111/" target="_blank" rel="noopener">《程序员修炼之道-从小工到专家》</a></p><p><a href="https://book.douban.com/subject/4199741/" target="_blank" rel="noopener">《代码整洁之道》</a></p><p><a href="https://book.douban.com/subject/11614538/" target="_blank" rel="noopener">《程序员的职业素养》</a></p><p><a href="https://book.douban.com/subject/1173730/" target="_blank" rel="noopener">《重构在册》</a></p><p><a href="https://book.douban.com/subject/4037534/" target="_blank" rel="noopener">《敏捷开发的艺术》</a></p></li><li><p>架构设计的书</p><p><a href="https://book.douban.com/subject/26304417/" target="_blank" rel="noopener">《发布！软件的设计与部署-Release It!:Design and Deploy Production-Ready Software》</a></p><p><a href="https://book.douban.com/subject/25723064/" target="_blank" rel="noopener">《大型网站技术架构：核心原理与案例分析》</a></p><p><a href="https://book.douban.com/subject/10756899/" target="_blank" rel="noopener">《高扩展性网站的50条原则》</a></p><p><a href="https://book.douban.com/subject/26772677/" target="_blank" rel="noopener">《微服务设计》</a></p><p><a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener">《Head First 设计模式》</a></p></li></ol>]]></content>
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向切面的Spring—面向切面编程</title>
      <link href="/2018/08/16/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84Spring%E2%80%94%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/08/16/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84Spring%E2%80%94%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>在软件开发中，散布于应用中多处的功能被称为横切关注点（cross-cutting concern）。通常来讲，这些横切关注点从概念上是与应用的业务逻辑相分离的（但往往会直接嵌入到应用的业务逻辑之中）。而把这些横切关注点与业务逻辑相分离正是面向切面编程（AOP）所要解决的问题。</p><p>DI有助于应用对象之间的解耦，而AOP则可以实现横切关注点与它们所影响的对象之间的解耦。</p><p>横切关注点可以被模块化为特殊的类，这些类被称为切面。换言之，切面可以实现横切关注点（跨多个应用对象的逻辑）的模块化。这样做有两个好处：首先，现在每个关注点都集中于一个地方，而不是分散到多处代码中；其次，服务模块更简洁，因为它们只包含主要关注点（或核心功能）的代码，而次要关注点的代码被转移到切面中了。</p><p>描述切面的常用术语有通知、切点和连接点：</p><ul><li><p>通知（Advice）</p><p>Spring的切面可以应用五种类型的通知：</p><ul><li>前置通知（Before）：在目标方法被调用之前调用通知功能</li><li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么</li><li>返回通知（After-returning）：在目标方法成功执行之后调用通知</li><li>异常通知（After-throwing）：在目标方法抛出异常后调用通知</li><li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</li></ul></li><li><p>连接点（Join point）</p><p>连接点是在应用执行过程中能够插入切面的一个点，这个点可以是调用方法时、抛出异常时，甚至是修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为</p></li><li><p>切点（Pointcut）</p><p>一个切面并不需要通知应用的所有连接点，切点的定义会匹配通知所要织入的一个或多个连接点，由此看来，切点是有助于缩小切面所通知的连接点的范围</p></li><li><p>切面（Aspect）</p><p>切面是通知和切点的结合，通知和切点共同定义了切面的全部内容—它是什么，在何时何处完成其功能</p></li><li><p>引入（Introduction）</p><p>引入允许我们向现有的类添加新方法或属性</p></li><li><p>织入（Weaving）</p><p>织入是把切面应用到目标对象并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期里有多个点可以进行织入：</p><ul><li>编译期：切面在目标类编译时被织入，AspecJ的织入编译器是以这种方式织入切面的</li><li>类加载期：切面在目标类加载到JVM时被织入，AspecJ5的加载时织入支持这种方式</li><li>运行期：切面在应用运行的某个时刻被织入，一般情况下，在织入切面时，AOP容器会为目标对象动态的创建一个代理对象，Spring AOP是以这种方式织入切面的</li></ul></li></ul><p>创建切点来定义切面所织入的连接点是AOP框架的基本功能。</p><p>Spring提供了四种类型的AOP支持：</p><ul><li>基于代理的经典Spring AOP</li><li>纯POJO切面</li><li>@AspectJ注解驱动的切面</li><li>注入式AspectJ切面</li></ul><p>Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截。此处对代理以及静态代理与动态代理之间的区别作一下讲解：</p><ul><li>代理：代理是一种常见的设计模式，它的目的是为其他对象提供一个代理来控制对某个对象的访问。代理类负责为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。通俗来讲，代理所要解决的问题是当两个类需要通信时，引入第三方代理类，将两个类的关系解耦，让我们只了解代理类即可，而且代理的出现还能让我们完成与另一个类之间的关系的统一管理，但是，代理类与委托类必须实现相同的接口，因为代理真正调用的还是委托类的方法。</li><li>静态代理与动态代理：静态代理类只能为特定的接口服务，一个代理只能代理一种类型，而且是在编译时就已经确定被代理的对象，要想为多个接口服务则需要建立很多个代理类。而动态代理是在运行时，通过反射机制实现动态代理，并且能够代理各种类型的对象。</li></ul><p>如果说AOP是一种思想，那么动态代理可以说是AOP思想的一种实现。</p><p>Spring的切面由包裹了目标对象的代理类实现，代理类用于处理方法的调用，执行额外的切面逻辑以及调用目标方法。只有当应用需要被代理的bean时，Spring才创建代理对象。</p><p>也正是因为Spring基于动态代理，所以Spring只支持方法连接点。而一些其他的AOP框架，如AspectJ和JBoss，除了方法切点，它们还提供字段和构造器接入点。由于Spring缺少对字段连接点的支持，我们无法创建细粒度的通知，例如拦截对象字段的修改。但是方法拦截可以满足绝大部分的需求。如果需要方法拦截之外的连接点拦截功能，我们可以利用AspectJ来补充Spring AOP的功能。</p>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> 面向切面 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring之旅—简化Java开发</title>
      <link href="/2018/08/13/Spring%E4%B9%8B%E6%97%85%E2%80%94%E7%AE%80%E5%8C%96Java%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/13/Spring%E4%B9%8B%E6%97%85%E2%80%94%E7%AE%80%E5%8C%96Java%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>虽然Spring用bean或者JavaBean来表示应用组件，但并不意味着Spring组件必须遵循JavaBean规范，一个Spring组件可以是任何形式的POJO，此处采用JavaBean的广泛定义，即POJO的同义词。</p><p>为了降低java开发的复杂性，Spring采取了以下四种关键性策略：</p><ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯例进行声明式编程</li><li>通过切面和模板减少样板式代码</li></ul><h5 id="1-激发POJO的潜能"><a href="#1-激发POJO的潜能" class="headerlink" title="1. 激发POJO的潜能"></a>1. 激发POJO的潜能</h5><p>Spring不会强迫你实现Spring规范的接口或继承Spring规范的类，相反，在基于Spring构建的应用中，它的类通常没有任何痕迹表明你使用了Spring。最坏的场景是，一个类或许会使用Spring注解，但它依旧是POJO。Spring的非侵入式编程意味着这个类在Spring应用和非Spring应用中都可以发挥同样的作用。</p><h5 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2. 依赖注入"></a>2. 依赖注入</h5><p>任何一个有实际意义的应用都会由两个或者更多的类组成，这些类相互之间进行协作来完成特定的业务逻辑。传统的做法，每个对象负责管理与自己相互协作的对象的引用，会导致高度耦合和难以测试的代码。</p><p>耦合的两面性：一方面，紧密耦合的代码难以测试，难以复用，难以理解，并表现出“打地鼠”式的bug特性；另一方面，一定程度的耦合也是必须的，因为完全没有耦合的代码什么也做不了。</p><p>通过DI（dependency injection, 依赖注入）,对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定，对象无需自行创建或管理它们的依赖关系，依赖关系会被自动注入到需要它们的对象中去。</p><p>依赖注入的方式之一，构造器注入。</p><p>DI所带来的最大收益，松耦合。</p><p>创建应用组件之间协作的行为通常称为装配。采用XML是Spring中很常见的一种装配bean的方式。</p><p>Spring通过应用上下文（Application Context）装配bean的定义并把他们组装起来，Spring应用上下文全权负责对象的创建和组装。</p><h5 id="3-应用切面"><a href="#3-应用切面" class="headerlink" title="3. 应用切面"></a>3. 应用切面</h5><p>DI能够让相互协作的软件组件保持松散耦合，而面向切面编程（aspect-oriented programming，AOP）允许你把遍布应用各处的功能分离出来形成可重用的组件。</p><p>诸如日志、事务管理和安全这样的系统服务经常融入到自身具有核心业务逻辑的组件中去，这些系统服务通常被称为横切关注点，因为它们会跨越系统的多个组件。而AOP能使这些系统服务模块化，并以声明的方式将它们应用到它们需要影响的组件中去，所造成的结果就是这些组件会有更高的内聚性并且更加关注自身的业务。总之，AOP能确保POJO的简单性。</p><p>借助AOP，可以使用各种功能层去包裹核心业务层，这些层以声明的方式灵活地应用的系统中，你的核心应用甚至根本不知道它们的存在。是将安全、事务以及日志关注点与核心业务逻辑相分离。</p><p>AOP的简单流程：声明bean、声明切面、定义切点、声明前置通知、声明后置通知。</p><h5 id="4-使用模板消除样板式代码"><a href="#4-使用模板消除样板式代码" class="headerlink" title="4. 使用模板消除样板式代码"></a>4. 使用模板消除样板式代码</h5><p>JDBC不是产生样板式代码的唯一场景，JMS、JNDI和使用REST服务通常也涉及大量的重复代码。Spring旨在通过模板封装来消除样板式代码，于是有了Spring的JdbcTemplate。</p>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> 面向切面 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring之旅—前言</title>
      <link href="/2018/08/09/Spring%E4%B9%8B%E6%97%85%E2%80%94%E5%89%8D%E8%A8%80/"/>
      <url>/2018/08/09/Spring%E4%B9%8B%E6%97%85%E2%80%94%E5%89%8D%E8%A8%80/</url>
      <content type="html"><![CDATA[<p>在诞生之初，创建Spring的主要目的是用来替代更加重量级的企业级Java技术，尤其是EJB（Enterprise JavaBean）。相对于EJB来说，Spring提供了更加轻量级和简单的编程模型。它增强了简单老式Java对象POJO（Plain Old Java Object）的功能，使其具备了之前只有EJB和其他企业级Java规范才具有的功能。此处对EJB、POJO以及JavaBean的定义及区别作一下介绍：</p><ul><li><p>EJB：一组“功能”JavaBean的集合，这一组JavaBean组合起来实现了某个企业组的业务逻辑，这里的一组JavaBean不是随意组合的，它们需要满足能实现某项业务功能的搭配。使用EJB，需要使用JavaEE服务器，EJB是大型的。</p></li><li><p>POJO：有一些private的参数作为对象的属性，然后针对每一个参数定义get和set方法访问的接口，没有从任何类继承、也没实现任何接口，更没有被其他框架侵入的java对象。</p></li><li><p>JavaBean：一种java语言编写的可重用组件，符合一定规范的java类，不是一种技术，而是一种规范。它的方法命名，构造及行为必须符合特定的约定：</p><ol><li>所有属性为private</li><li>这个类必须有一个公共的缺省构造函数，即无参构造器</li><li>这个类的属性使用getter和setter来访问，其他方法遵从标准命名规范</li><li>这个类是可序列化的，即实现serializable接口</li></ol></li></ul><p>POJO的格式是用于数据的临时传递，它只能装载数据，作为数据传递的载体，不具备业务逻辑处理的能力，而JavaBean虽然数据的获取与POJO一样，但是JavaBean中往往会封装一些简单逻辑。</p><p>Spring正在涉足和创新的领域：移动开发、社交API集成、NoSQL数据库、云计算以及大数据。</p>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
