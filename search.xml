<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java的位运算总结</title>
      <link href="/2018/08/23/Java%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/23/Java%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>Java提供的位运算符有：左移（&lt;&lt;）、右移（&gt;&gt;）、无符号右移（&gt;&gt;&gt;）、位与（&amp;）、位或（|）、位非（~）、位异或（^），除了位非（~）是一元操作符外，其他的都是二元操作符。</p><ol><li><p>左移（&lt;&lt;）</p><p>例如：将5左移2位</p><p>程序会先将5转换为2进制表示形式（java中整数的默认类型为int，即32位）</p><p>5的二进制原码为：    0000 0000 0000 0000 0000 0000 0000 0101        左移2位后，低位补0</p><p>5左移2位的结果为：    0000 0000 0000 0000 0000 0000 0001 0100        换算成10进制为20</p><p>左移：对于正数或者负数左移，低位都是用0补</p></li><li><p>右移（&gt;&gt;）</p><p>例如：将5右移2位</p><p>程序会先将5转换为2进制表示形式</p><p>5的二进制原码为：    0000 0000 0000 0000 0000 0000 0000 0101        右移2位后，高位补0</p><p>5右移2位的结果为：    0000 0000 0000 0000 0000 0000 0000 0001        换算成10进制为1</p><p>右移：对于正数右移，高位用0补，对于负数右移，高位用1补</p></li><li><p>无符号右移（&gt;&gt;&gt;）</p><p>例如：将-5无符号右移3位</p><p>5的二进制原码为：    0000 0000 0000 0000 0000 0000 0000 0101</p><p>5的二进制反码为：    1111 1111 1111 1111 1111 1111 1111 1010</p><p>5的二进制补码为：    1111 1111 1111 1111 1111 1111 1111 1011        即为-5的二进制码</p><p>那么-5无符号右移3位的结果为536870911换算成二进制：0001 1111 1111 1111 1111 1111 1111 1111</p><p>在计算机中，负数以其正值的补码形式表示，对于负数，求其补码的方法为：在原码基础上，先置最高的符号位为1，剩下的位按位取反，末尾加1</p><p>无符号右移：对于负数无符号右移，高位用0补，自然负数变成正数</p></li><li><p>位与（&amp;）</p><p>例如：将5和3作与运算</p><p>5的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0101</p><p>3的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0011</p><p>5 &amp; 3的结果为1换算成二进制：  0000 0000 0000 0000 0000 0000 0000 0001</p><p>位与操作：第一个操作数的第n位与第二个操作数的第n位如果都是1，那么结果的第n位也为1，否则为0</p></li><li><p>位或（|）</p><p>例如：将5和3作或运算</p><p>5的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0101</p><p>3的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0011</p><p>5 | 3的结果为7换算成二进制：   0000 0000 0000 0000 0000 0000 0000 0111</p><p>位或操作：第一个操作数的第n位与第二个操作数的第n位只要有一个为1，那么结果的第n位为1，否则为0</p></li><li><p>位异或（^）</p><p>例如：将5和3作异或运算</p><p>5的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0101</p><p>3的二进制码为：                0000 0000 0000 0000 0000 0000 0000 0011</p><p>5 ^ 3的结果为6换算成二进制：   0000 0000 0000 0000 0000 0000 0000 0110</p><p>位异或操作：第一个操作数的第n位与第二个操作数的第n位如果相反，那么结果的第n位为1，否则为0</p></li><li><p>位非（~）</p><p>例如：将5作非运算</p><p>5的二进制码为：0000 0000 0000 0000 0000 0000 0000 0101</p><p>~ 5的结果为-6换算成二进制：    1111 1111 1111 1111 1111 1111 1111 1010</p><p>位非操作：位非是一元操作符，操作数的第n位为1，那么结果的第n位为0，反之为1</p></li></ol><p>由位运算操作符衍生而来的有：&amp;=（按位与赋值）、|=（按位或赋值 ）、^=（按位非赋值 ）、&gt;&gt;=（右移赋值 ）、&gt;&gt;&gt;=（无符号右移赋值 ）、&lt;&lt;=（赋值左移 ）</p>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>美到极致的情话</title>
      <link href="/2018/08/22/%E7%BE%8E%E5%88%B0%E6%9E%81%E8%87%B4%E7%9A%84%E6%83%85%E8%AF%9D/"/>
      <url>/2018/08/22/%E7%BE%8E%E5%88%B0%E6%9E%81%E8%87%B4%E7%9A%84%E6%83%85%E8%AF%9D/</url>
      <content type="html"><![CDATA[<ol><li>惊觉相思不露，原来只因已入骨，情不知所起，一往而深。恨不知所踪，一笑而泯。人世间有百媚千红，唯独你是我情之所钟。</li><li>浮世三千，吾爱有三，日、月与卿，日为朝，月为幕，卿为朝朝暮暮。</li><li>唯独你双手握得碎我，但我享受这折磨。</li><li>海底月是天上月，眼前人是心上人。</li><li>在青山绿水之间，我想牵着你的手，走过这座桥，桥上是绿叶红花，桥下是流水人家，桥的那头是青丝，桥的这头是白发。</li><li>人生最遗憾的莫过于轻易的放弃了不该放弃的，固执的坚持了不该坚持的。</li><li>夜阑卧听风吹雨，铁马是你，冰河也是你。</li><li>这一世，所到之地，都不过是故地重游；这世间，所有相遇，都不过是久别重逢。</li><li>我拦不住要走的风，也抱不住要走的你。</li><li>你，一会看我，一会看云；我觉得，你看我时，很远，你看云时很近。</li></ol>]]></content>
      
      <categories>
          
          <category> 金句良言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java后端书架</title>
      <link href="/2018/08/21/Java%E5%90%8E%E7%AB%AF%E4%B9%A6%E6%9E%B6/"/>
      <url>/2018/08/21/Java%E5%90%8E%E7%AB%AF%E4%B9%A6%E6%9E%B6/</url>
      <content type="html"><![CDATA[<ol><li><p>操作系统与网络的书</p><p><a href="https://book.douban.com/subject/6097773/" target="_blank" rel="noopener">《Linux内核设计与实现 第三版》</a></p><p><a href="https://book.douban.com/subject/25828773/" target="_blank" rel="noopener">《Linux系统编程 第二版》</a></p><p><a href="https://book.douban.com/subject/1088054/" target="_blank" rel="noopener">《TCP/IP详解 卷1：协议》</a></p><p><a href="https://book.douban.com/subject/26268767/" target="_blank" rel="noopener">《WireShark网络分析就这么简单》</a></p><p><a href="https://book.douban.com/subject/26710788/" target="_blank" rel="noopener">《WireShark网络分析的艺术》</a></p></li><li><p>算法的书</p><p><a href="https://book.douban.com/subject/26745780/" target="_blank" rel="noopener">《数据结构与算法分析-Java语言描述 第三版》</a></p><p><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="noopener">《算法 第四版》</a></p></li><li><p>语言的书</p><p><a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener">《Java并发编程实战》</a></p><p><a href="https://book.douban.com/subject/26663605/" target="_blank" rel="noopener">《实战Java高并发程序设计》</a></p><p><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机 第二版》</a></p><p><a href="https://book.douban.com/subject/26740520/" target="_blank" rel="noopener">《Java性能权威指南》</a></p><p><a href="https://book.douban.com/subject/25762168/" target="_blank" rel="noopener">《Java核心技术-Core Java》</a></p></li><li><p>具体技能的书</p><p><a href="https://book.douban.com/subject/26593175/" target="_blank" rel="noopener">《Docker：容器与容器云》</a></p><p><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="noopener">《Redis设计与实现分析》</a></p><p><a href="https://book.douban.com/subject/26702824/" target="_blank" rel="noopener">《分布式服务框架：原理与实践》</a></p><p><a href="https://book.douban.com/subject/26649141/" target="_blank" rel="noopener">《Spark技术内幕》</a></p><p><a href="https://book.douban.com/subject/26373138/" target="_blank" rel="noopener">《Netty权威指南 第二版》</a></p></li><li><p>程序员的自我修养</p><p><a href="https://book.douban.com/subject/1152111/" target="_blank" rel="noopener">《程序员修炼之道-从小工到专家》</a></p><p><a href="https://book.douban.com/subject/4199741/" target="_blank" rel="noopener">《代码整洁之道》</a></p><p><a href="https://book.douban.com/subject/11614538/" target="_blank" rel="noopener">《程序员的职业素养》</a></p><p><a href="https://book.douban.com/subject/1173730/" target="_blank" rel="noopener">《重构在册》</a></p><p><a href="https://book.douban.com/subject/4037534/" target="_blank" rel="noopener">《敏捷开发的艺术》</a></p></li><li><p>架构设计的书</p><p><a href="https://book.douban.com/subject/26304417/" target="_blank" rel="noopener">《发布！软件的设计与部署-Release It!:Design and Deploy Production-Ready Software》</a></p><p><a href="https://book.douban.com/subject/25723064/" target="_blank" rel="noopener">《大型网站技术架构：核心原理与案例分析》</a></p><p><a href="https://book.douban.com/subject/10756899/" target="_blank" rel="noopener">《高扩展性网站的50条原则》</a></p><p><a href="https://book.douban.com/subject/26772677/" target="_blank" rel="noopener">《微服务设计》</a></p><p><a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener">《Head First 设计模式》</a></p></li></ol>]]></content>
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向切面的Spring—面向切面编程</title>
      <link href="/2018/08/16/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84Spring%E2%80%94%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/08/16/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84Spring%E2%80%94%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>在软件开发中，散布于应用中多处的功能被称为横切关注点（cross-cutting concern）。通常来讲，这些横切关注点从概念上是与应用的业务逻辑相分离的（但往往会直接嵌入到应用的业务逻辑之中）。而把这些横切关注点与业务逻辑相分离正是面向切面编程（AOP）所要解决的问题。</p><p>DI有助于应用对象之间的解耦，而AOP则可以实现横切关注点与它们所影响的对象之间的解耦。</p><p>横切关注点可以被模块化为特殊的类，这些类被称为切面。换言之，切面可以实现横切关注点（跨多个应用对象的逻辑）的模块化。这样做有两个好处：首先，现在每个关注点都集中于一个地方，而不是分散到多处代码中；其次，服务模块更简洁，因为它们只包含主要关注点（或核心功能）的代码，而次要关注点的代码被转移到切面中了。</p><p>描述切面的常用术语有通知、切点和连接点：</p><ul><li><p>通知（Advice）</p><p>Spring的切面可以应用五种类型的通知：</p><ul><li>前置通知（Before）：在目标方法被调用之前调用通知功能</li><li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么</li><li>返回通知（After-returning）：在目标方法成功执行之后调用通知</li><li>异常通知（After-throwing）：在目标方法抛出异常后调用通知</li><li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</li></ul></li><li><p>连接点（Join point）</p><p>连接点是在应用执行过程中能够插入切面的一个点，这个点可以是调用方法时、抛出异常时，甚至是修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为</p></li><li><p>切点（Pointcut）</p><p>一个切面并不需要通知应用的所有连接点，切点的定义会匹配通知所要织入的一个或多个连接点，由此看来，切点是有助于缩小切面所通知的连接点的范围</p></li><li><p>切面（Aspect）</p><p>切面是通知和切点的结合，通知和切点共同定义了切面的全部内容—它是什么，在何时何处完成其功能</p></li><li><p>引入（Introduction）</p><p>引入允许我们向现有的类添加新方法或属性</p></li><li><p>织入（Weaving）</p><p>织入是把切面应用到目标对象并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期里有多个点可以进行织入：</p><ul><li>编译期：切面在目标类编译时被织入，AspecJ的织入编译器是以这种方式织入切面的</li><li>类加载期：切面在目标类加载到JVM时被织入，AspecJ5的加载时织入支持这种方式</li><li>运行期：切面在应用运行的某个时刻被织入，一般情况下，在织入切面时，AOP容器会为目标对象动态的创建一个代理对象，Spring AOP是以这种方式织入切面的</li></ul></li></ul><p>创建切点来定义切面所织入的连接点是AOP框架的基本功能。</p><p>Spring提供了四种类型的AOP支持：</p><ul><li>基于代理的经典Spring AOP</li><li>纯POJO切面</li><li>@AspectJ注解驱动的切面</li><li>注入式AspectJ切面</li></ul><p>Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截。此处对代理以及静态代理与动态代理之间的区别作一下讲解：</p><ul><li>代理：代理是一种常见的设计模式，它的目的是为其他对象提供一个代理来控制对某个对象的访问。代理类负责为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。通俗来讲，代理所要解决的问题是当两个类需要通信时，引入第三方代理类，将两个类的关系解耦，让我们只了解代理类即可，而且代理的出现还能让我们完成与另一个类之间的关系的统一管理，但是，代理类与委托类必须实现相同的接口，因为代理真正调用的还是委托类的方法。</li><li>静态代理与动态代理：静态代理类只能为特定的接口服务，一个代理只能代理一种类型，而且是在编译时就已经确定被代理的对象，要想为多个接口服务则需要建立很多个代理类。而动态代理是在运行时，通过反射机制实现动态代理，并且能够代理各种类型的对象。</li></ul><p>如果说AOP是一种思想，那么动态代理可以说是AOP思想的一种实现。</p><p>Spring的切面由包裹了目标对象的代理类实现，代理类用于处理方法的调用，执行额外的切面逻辑以及调用目标方法。只有当应用需要被代理的bean时，Spring才创建代理对象。</p><p>也正是因为Spring基于动态代理，所以Spring只支持方法连接点。而一些其他的AOP框架，如AspectJ和JBoss，除了方法切点，它们还提供字段和构造器接入点。由于Spring缺少对字段连接点的支持，我们无法创建细粒度的通知，例如拦截对象字段的修改。但是方法拦截可以满足绝大部分的需求。如果需要方法拦截之外的连接点拦截功能，我们可以利用AspectJ来补充Spring AOP的功能。</p>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring之旅—简化Java开发</title>
      <link href="/2018/08/13/Spring%E4%B9%8B%E6%97%85%E2%80%94%E7%AE%80%E5%8C%96Java%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/13/Spring%E4%B9%8B%E6%97%85%E2%80%94%E7%AE%80%E5%8C%96Java%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>虽然Spring用bean或者JavaBean来表示应用组件，但并不意味着Spring组件必须遵循JavaBean规范，一个Spring组件可以是任何形式的POJO，此处采用JavaBean的广泛定义，即POJO的同义词。</p><p>为了降低java开发的复杂性，Spring采取了以下四种关键性策略：</p><ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯例进行声明式编程</li><li>通过切面和模板减少样板式代码</li></ul><h5 id="1-激发POJO的潜能"><a href="#1-激发POJO的潜能" class="headerlink" title="1. 激发POJO的潜能"></a>1. 激发POJO的潜能</h5><p>Spring不会强迫你实现Spring规范的接口或继承Spring规范的类，相反，在基于Spring构建的应用中，它的类通常没有任何痕迹表明你使用了Spring。最坏的场景是，一个类或许会使用Spring注解，但它依旧是POJO。Spring的非侵入式编程意味着这个类在Spring应用和非Spring应用中都可以发挥同样的作用。</p><h5 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2. 依赖注入"></a>2. 依赖注入</h5><p>任何一个有实际意义的应用都会由两个或者更多的类组成，这些类相互之间进行协作来完成特定的业务逻辑。传统的做法，每个对象负责管理与自己相互协作的对象的引用，会导致高度耦合和难以测试的代码。</p><p>耦合的两面性：一方面，紧密耦合的代码难以测试，难以复用，难以理解，并表现出“打地鼠”式的bug特性；另一方面，一定程度的耦合也是必须的，因为完全没有耦合的代码什么也做不了。</p><p>通过DI（dependency injection, 依赖注入）,对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定，对象无需自行创建或管理它们的依赖关系，依赖关系会被自动注入到需要它们的对象中去。</p><p>依赖注入的方式之一，构造器注入。</p><p>DI所带来的最大收益，松耦合。</p><p>创建应用组件之间协作的行为通常称为装配。采用XML是Spring中很常见的一种装配bean的方式。</p><p>Spring通过应用上下文（Application Context）装配bean的定义并把他们组装起来，Spring应用上下文全权负责对象的创建和组装。</p><h5 id="3-应用切面"><a href="#3-应用切面" class="headerlink" title="3. 应用切面"></a>3. 应用切面</h5><p>DI能够让相互协作的软件组件保持松散耦合，而面向切面编程（aspect-oriented programming，AOP）允许你把遍布应用各处的功能分离出来形成可重用的组件。</p><p>诸如日志、事务管理和安全这样的系统服务经常融入到自身具有核心业务逻辑的组件中去，这些系统服务通常被称为横切关注点，因为它们会跨越系统的多个组件。而AOP能使这些系统服务模块化，并以声明的方式将它们应用到它们需要影响的组件中去，所造成的结果就是这些组件会有更高的内聚性并且更加关注自身的业务。总之，AOP能确保POJO的简单性。</p><p>借助AOP，可以使用各种功能层去包裹核心业务层，这些层以声明的方式灵活地应用的系统中，你的核心应用甚至根本不知道它们的存在。是将安全、事务以及日志关注点与核心业务逻辑相分离。</p><p>AOP的简单流程：声明bean、声明切面、定义切点、声明前置通知、声明后置通知。</p><h5 id="4-使用模板消除样板式代码"><a href="#4-使用模板消除样板式代码" class="headerlink" title="4. 使用模板消除样板式代码"></a>4. 使用模板消除样板式代码</h5><p>JDBC不是产生样板式代码的唯一场景，JMS、JNDI和使用REST服务通常也涉及大量的重复代码。Spring旨在通过模板封装来消除样板式代码，于是有了Spring的JdbcTemplate。</p>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring之旅—前言</title>
      <link href="/2018/08/09/Spring%E4%B9%8B%E6%97%85%E2%80%94%E5%89%8D%E8%A8%80/"/>
      <url>/2018/08/09/Spring%E4%B9%8B%E6%97%85%E2%80%94%E5%89%8D%E8%A8%80/</url>
      <content type="html"><![CDATA[<p>在诞生之初，创建Spring的主要目的是用来替代更加重量级的企业级Java技术，尤其是EJB（Enterprise JavaBean）。相对于EJB来说，Spring提供了更加轻量级和简单的编程模型。它增强了简单老式Java对象POJO（Plain Old Java Object）的功能，使其具备了之前只有EJB和其他企业级Java规范才具有的功能。此处对EJB、POJO以及JavaBean的定义及区别作一下介绍：</p><ul><li><p>EJB：一组“功能”JavaBean的集合，这一组JavaBean组合起来实现了某个企业组的业务逻辑，这里的一组JavaBean不是随意组合的，它们需要满足能实现某项业务功能的搭配。使用EJB，需要使用JavaEE服务器，EJB是大型的。</p></li><li><p>POJO：有一些private的参数作为对象的属性，然后针对每一个参数定义get和set方法访问的接口，没有从任何类继承、也没实现任何接口，更没有被其他框架侵入的java对象。</p></li><li><p>JavaBean：一种java语言编写的可重用组件，符合一定规范的java类，不是一种技术，而是一种规范。它的方法命名，构造及行为必须符合特定的约定：</p><ol><li>所有属性为private</li><li>这个类必须有一个公共的缺省构造函数，即无参构造器</li><li>这个类的属性使用getter和setter来访问，其他方法遵从标准命名规范</li><li>这个类是可序列化的，即实现serializable接口</li></ol></li></ul><p>POJO的格式是用于数据的临时传递，它只能装载数据，作为数据传递的载体，不具备业务逻辑处理的能力，而JavaBean虽然数据的获取与POJO一样，但是JavaBean中往往会封装一些简单逻辑。</p><p>Spring正在涉足和创新的领域：移动开发、社交API集成、NoSQL数据库、云计算以及大数据。</p>]]></content>
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
