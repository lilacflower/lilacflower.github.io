<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lilac的个人主页</title>
  
  <subtitle>生活离不开coding，也离不开诗和远方...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiyuxy.com/"/>
  <updated>2018-08-13T08:55:39.676Z</updated>
  <id>http://xiyuxy.com/</id>
  
  <author>
    <name>Lilac</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring之旅—简化Java开发</title>
    <link href="http://xiyuxy.com/2018/08/13/Spring%E4%B9%8B%E6%97%85%E2%80%94%E7%AE%80%E5%8C%96Java%E5%BC%80%E5%8F%91/"/>
    <id>http://xiyuxy.com/2018/08/13/Spring之旅—简化Java开发/</id>
    <published>2018-08-13T03:55:57.000Z</published>
    <updated>2018-08-13T08:55:39.676Z</updated>
    
    <content type="html"><![CDATA[<p>虽然Spring用bean或者JavaBean来表示应用组件，但并不意味着Spring组件必须遵循JavaBean规范，一个Spring组件可以是任何形式的POJO，此处采用JavaBean的广泛定义，即POJO的同义词。</p><p>为了降低java开发的复杂性，Spring采取了以下四种关键性策略：</p><ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯例进行声明式编程</li><li>通过切面和模板减少样板式代码</li></ul><h5 id="1-激发POJO的潜能"><a href="#1-激发POJO的潜能" class="headerlink" title="1. 激发POJO的潜能"></a>1. 激发POJO的潜能</h5><p>Spring不会强迫你实现Spring规范的接口或继承Spring规范的类，相反，在基于Spring构建的应用中，它的类通常没有任何痕迹表明你使用了Spring。最坏的场景是，一个类或许会使用Spring注解，但它依旧是POJO。Spring的非侵入式编程意味着这个类在Spring应用和非Spring应用中都可以发挥同样的作用。</p><h5 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2. 依赖注入"></a>2. 依赖注入</h5><p>任何一个有实际意义的应用都会由两个或者更多的类组成，这些类相互之间进行协作来完成特定的业务逻辑。传统的做法，每个对象负责管理与自己相互协作的对象的引用，会导致高度耦合和难以测试的代码。</p><p>耦合的两面性：一方面，紧密耦合的代码难以测试，难以复用，难以理解，并表现出“打地鼠”式的bug特性；另一方面，一定程度的耦合也是必须的，因为完全没有耦合的代码什么也做不了。</p><p>通过DI（dependency injection, 依赖注入）,对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定，对象无需自行创建或管理它们的依赖关系，依赖关系会被自动注入到需要它们的对象中去。</p><p>依赖注入的方式之一，构造器注入。</p><p>DI所带来的最大收益，松耦合。</p><p>创建应用组件之间协作的行为通常称为装配。采用XML是Spring中很常见的一种装配bean的方式。</p><p>Spring通过应用上下文（Application Context）装配bean的定义并把他们组装起来，Spring应用上下文全权负责对象的创建和组装。</p><h5 id="3-应用切面"><a href="#3-应用切面" class="headerlink" title="3. 应用切面"></a>3. 应用切面</h5><p>DI能够让相互协作的软件组件保持松散耦合，而面向切面编程（aspect-oriented programming，AOP）允许你把遍布应用各处的功能分离出来形成可重用的组件。</p><p>诸如日志、事务管理和安全这样的系统服务经常融入到自身具有核心业务逻辑的组件中去，这些系统服务通常被称为横切关注点，因为它们会跨越系统的多个组件。而AOP能使这些系统服务模块化，并以声明的方式将它们应用到它们需要影响的组件中去，所造成的结果就是这些组件会有更高的内聚性并且更加关注自身的业务。总之，AOP能确保POJO的简单性。</p><p>借助AOP，可以使用各种功能层去包裹核心业务层，这些层以声明的方式灵活地应用的系统中，你的核心应用甚至根本不知道它们的存在。是将安全、事务以及日志关注点与核心业务逻辑相分离。</p><p>AOP的简单流程：声明bean、声明切面、定义切点、声明前置通知、声明后置通知。</p><h5 id="4-使用模板消除样板式代码"><a href="#4-使用模板消除样板式代码" class="headerlink" title="4. 使用模板消除样板式代码"></a>4. 使用模板消除样板式代码</h5><p>JDBC不是产生样板式代码的唯一场景，JMS、JNDI和使用REST服务通常也涉及大量的重复代码。Spring旨在通过模板封装来消除样板式代码，于是有了Spring的JdbcTemplate。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然Spring用bean或者JavaBean来表示应用组件，但并不意味着Spring组件必须遵循JavaBean规范，一个Spring组件可以是任何形式的POJO，此处采用JavaBean的广泛定义，即POJO的同义词。&lt;/p&gt;
&lt;p&gt;为了降低java开发的复杂性，Spr
      
    
    </summary>
    
      <category term="程序设计" scheme="http://xiyuxy.com/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="http://xiyuxy.com/tags/java/"/>
    
      <category term="spring" scheme="http://xiyuxy.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring之旅—前言</title>
    <link href="http://xiyuxy.com/2018/08/09/Spring%E4%B9%8B%E6%97%85%E2%80%94%E5%89%8D%E8%A8%80/"/>
    <id>http://xiyuxy.com/2018/08/09/Spring之旅—前言/</id>
    <published>2018-08-09T01:08:55.000Z</published>
    <updated>2018-08-13T03:47:03.432Z</updated>
    
    <content type="html"><![CDATA[<p>在诞生之初，创建Spring的主要目的是用来替代更加重量级的企业级Java技术，尤其是EJB（Enterprise JavaBean）。相对于EJB来说，Spring提供了更加轻量级和简单的编程模型。它增强了简单老式Java对象POJO（Plain Old Java Object）的功能，使其具备了之前只有EJB和其他企业级Java规范才具有的功能。此处对EJB、POJO以及JavaBean的定义及区别作一下介绍：</p><ul><li><p>EJB：一组“功能”JavaBean的集合，这一组JavaBean组合起来实现了某个企业组的业务逻辑，这里的一组JavaBean不是随意组合的，它们需要满足能实现某项业务功能的搭配。使用EJB，需要使用JavaEE服务器，EJB是大型的。</p></li><li><p>POJO：有一些private的参数作为对象的属性，然后针对每一个参数定义get和set方法访问的接口，没有从任何类继承、也没实现任何接口，更没有被其他框架侵入的java对象。</p></li><li><p>JavaBean：一种java语言编写的可重用组件，符合一定规范的java类，不是一种技术，而是一种规范。它的方法命名，构造及行为必须符合特定的约定：</p><ol><li>所有属性为private</li><li>这个类必须有一个公共的缺省构造函数，即无参构造器</li><li>这个类的属性使用getter和setter来访问，其他方法遵从标准命名规范</li><li>这个类是可序列化的，即实现serializable接口</li></ol></li></ul><p>POJO的格式是用于数据的临时传递，它只能装载数据，作为数据传递的载体，不具备业务逻辑处理的能力，而JavaBean虽然数据的获取与POJO一样，但是JavaBean中往往会封装一些简单逻辑。</p><p>Spring正在涉足和创新的领域：移动开发、社交API集成、NoSQL数据库、云计算以及大数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在诞生之初，创建Spring的主要目的是用来替代更加重量级的企业级Java技术，尤其是EJB（Enterprise JavaBean）。相对于EJB来说，Spring提供了更加轻量级和简单的编程模型。它增强了简单老式Java对象POJO（Plain Old Java Obj
      
    
    </summary>
    
      <category term="程序设计" scheme="http://xiyuxy.com/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="http://xiyuxy.com/tags/java/"/>
    
      <category term="spring" scheme="http://xiyuxy.com/tags/spring/"/>
    
  </entry>
  
</feed>
